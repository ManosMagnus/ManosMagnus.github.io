<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Google Summer of Code 2019 (Posts about passive)</title><link>https://manosmagnus.github.io/GSoC_19/</link><description></description><atom:link href="https://manosmagnus.github.io/GSoC_19/categories/passive.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:manolis.kirt@gmail.com"&gt;Manos Kirtas&lt;/a&gt; </copyright><lastBuildDate>Fri, 19 Jul 2019 12:38:45 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>WebSocket Passive Scan using scripts with ZAP</title><link>https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/</link><dc:creator>Manos Kirtas</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-1"&gt;Introduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-1-1"&gt;WebSocket Add-on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-1-2"&gt;WebSocket Passive Scanning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-1-3"&gt;Alerts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-1-4"&gt;Script Console Add-on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-2"&gt;WebSocket Passive Scan Scripts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-2-1"&gt;Default Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-2-2"&gt;Change the Default Scripts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-2-2-1"&gt;Use case 1: Application Error Scanner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-2-3"&gt;Write your own scripts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-2-3-1"&gt;Case 0: Greater Than 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-2-3-2"&gt;Case 1: Email Disclosure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-2-3-3"&gt;Case 2: Base64 Disclosure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-2-3-4"&gt;Case 3: Username Disclosure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-3"&gt;Tips and Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-4"&gt;Contribute to ZAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#sec-5"&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
In this blog post we are going to demonstrate a brand new feature of OWASP
Zed Attack Proxy (ZAP). Specifically, we are going to use the WebSocket add-on
in order to perform Passive Scanning of WebSocket messages. Even if you are not
familiar with ZAP, this guide will try to be extensive enough to cover the
basics behind ZAP, and give you the ability to write and use WebSocket passive
scan rules. On the other hand, if you are already familiar with ZAP, you can 
skip the introduction section and continue with the &lt;a href="https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/#ws-pscan-scripts"&gt;WebSocket Passive Scan Scripts
section&lt;/a&gt;.  
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
At its core, ZAP is what is known as "man-in-the-middle proxy". It stands
between the tester's browser and web application so that it can intercept and
inspect messages sent between browser and the web application.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;From &lt;a href="https://github.com/zaproxy/zaproxy/releases/download/v2.8.0/ZAPGettingStartedGuide-2.8.pdf"&gt;Getting Started Guide (pdf)&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://manosmagnus.github.io/GSoC_19/images/pscan-tutorial/zap_as_proxy.png" alt="zap_as_proxy.png" align="center" width="400 height 200"&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;WebSocket Add-on&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
By default the WebSocket Add-on is installed and it is responsible to intercept
and inspect WebSocket messages and connections. Other functions like setting
breakpoints, modify the content if needed, and then forward those messages to
the destination are also available, however, it is out of the scope for this
blog post. The WebSocket messages are displayed in a separate tab at the
bottom of the window. 
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://manosmagnus.github.io/GSoC_19/images/pscan-tutorial/websocket_panel_1.png" alt="websocket_panel_1.png" align="center" width="600 height 600"&gt; 
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2:&lt;/span&gt; WebSocket Panel&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;WebSocket Passive Scanning&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;blockquote&gt;
&lt;p&gt;
The passive scans rules are used to warn the user of potential vulnerability
that can be detected passively - &lt;span class="underline"&gt;they are not meant to send any new WebSocket&lt;/span&gt;
&lt;span class="underline"&gt;message or manipulate the messages in any way&lt;/span&gt;. They typically run against
all of the WebSocket messages that flow through ZAP. Passive rules run in
a separate background thread so that they have as little effect on performance
as possible. 
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;From &lt;a href="https://zaproxy.blogspot.com/2014/04/hacking-zap-3-passive-scan-rules.html"&gt;ZAP blog&lt;/a&gt;, (modified in order to fit the WebSocket Passive scan case)&lt;/i&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
At the end, what we want from the WebSocket Passive scan is to check all
WebSocket message payloads for information which might reveal the
existence of an issue/vulnerability (e.x. an internal server error).
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt;    
Open ZAP and configure your browser (&lt;a href="https://github.com/zaproxy/zap-core-help/wiki/HelpStartStart"&gt;Getting Started (wiki)&lt;/a&gt;). Open
&lt;a href="http://websocket.org/echo.html"&gt;http://websocket.org/echo.html&lt;/a&gt; in your configured browser, connect to the
WebSocket Server and send some messages.
&lt;/p&gt;

&lt;p&gt;
Let's assume now that somehow (we will see that in a following section) ZAP
found an issue in your WebSocket traffic, how you can be informed? By Alerts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Alerts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;blockquote&gt;
&lt;p&gt;
An alert is a potential vulnerability and is associated with a specific
WebSocket Message. A message can have more than one alert. 
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;from &lt;a href="https://github.com/zaproxy/zap-core-help/wiki/HelpStartConceptsAlerts"&gt;ZAP wiki,&lt;/a&gt; (modified in order to fit the WebSocket Passive scan case)&lt;/i&gt;
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://manosmagnus.github.io/GSoC_19/images/pscan-tutorial/alert_panel_1.png" alt="alert_panel_1.png" align="center" width="800 height 500"&gt; 
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 3:&lt;/span&gt; Alerts Panel&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
An Alert is raised by a scanner (we are going to see how in a while) which
gives it some properties. In the WebSocket Passive scan the properties
which are essential and displayed in the Alert panel are the following:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Name (title): The name of the alert
&lt;/li&gt;
&lt;li&gt;URL: The URL of the HTTP message which establishes the WebSocket Connection (handshake)
&lt;/li&gt;
&lt;li&gt;Risk: informs how crucial the alert is
&lt;/li&gt;
&lt;li&gt;Confidence: how sure that the issue occurs
&lt;/li&gt;
&lt;li&gt;Parameter: &lt;i&gt;Not needed for now&lt;/i&gt;
&lt;/li&gt;
&lt;li&gt;Attack: &lt;i&gt;Used only in active scanning&lt;/i&gt;
&lt;/li&gt;
&lt;li&gt;Evidence: The evidence of the issue
&lt;/li&gt;
&lt;li&gt;CWE ID: Common Weakness Enumeration (&lt;a href="https://en.wikipedia.org/wiki/Common_Weakness_Enumeration"&gt;wikipedia&lt;/a&gt;)
&lt;/li&gt;
&lt;li&gt;WASC ID: Threat Classification Reference
&lt;/li&gt;
&lt;li&gt;Source: &lt;code&gt;Passive&lt;/code&gt; as it performs passive scan and the id of the scanner
&lt;/li&gt;
&lt;li&gt;Description: A brief description of the alert
&lt;/li&gt;
&lt;li&gt;Other info: The WebSocket Message payload
&lt;/li&gt;
&lt;li&gt;Solution: Some possible solutions
&lt;/li&gt;
&lt;li&gt;Reference: External reference (eg links) for further reading 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt;    
Let's trigger some Alerts. Firstly, you have been already connected to the
WebSocket which is in the &lt;a href="http://websocket.org/echo.html"&gt;http://websocket.org/echo.html&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Case 1: Write an email address (like mail@zaproxy.com) and send it. See what alert
was raised. 
&lt;/p&gt;

&lt;p&gt;
Case 2: Encode "Hello World" with Base64 (SGVsbG8gV29ybGQ=) and send it. 
See what alert was raised. 
&lt;/p&gt;

&lt;p&gt;
Case 3: Type some valid XML with the following comment in it : 
&amp;lt;!â TODO: fix this issue â&amp;gt;. See what alert was raised.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;layer1&amp;gt;
  &amp;lt;!--This is a comment --&amp;gt;
  &amp;lt;layer2&amp;gt;
    &amp;lt;!-- TODO: fix this issue --&amp;gt;
    &amp;lt;form&amp;gt; ........ &amp;lt;/form&amp;gt;
  &amp;lt;/layer2&amp;gt;
&amp;lt;/layer1&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Case 4: Add a user in the 'Context'(&lt;a href="https://github.com/zaproxy/zap-core-help/wiki/HelpStartConceptsAuthentication#formBased"&gt;wiki&lt;/a&gt;). Encode the Username with MD5 hash and send
it. See what alert was raised. 
&lt;/p&gt;

&lt;p&gt;
Finally: Go to Alerts Panel hit the broom icon to remove all Alerts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;Script Console Add-on&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
And now one of my favorite features of ZAP, the Script Console add-on.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
The Script Console add-on allows you to run scripts that can be embedded within ZAP and can access internal ZAP data structures. It supports any scripting language that supports JSR 223 (&lt;a href="http://www.jcp.org/en/jsr/detail?id=223"&gt;http://www.jcp.org/en/jsr/detail?id=223&lt;/a&gt;) , including:
&lt;/p&gt;

&lt;p&gt;
ECMAScript / Javascript (using Nashorn engine, included by default)
&lt;/p&gt;

&lt;p&gt;
Zest &lt;a href="https://developer.mozilla.org/en-US/docs/zest"&gt;https://developer.mozilla.org/en-US/docs/zest&lt;/a&gt; (included by default)
&lt;/p&gt;

&lt;p&gt;
Groovy &lt;a href="http://groovy-lang.org/"&gt;http://groovy-lang.org/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Python &lt;a href="http://www.jython.org"&gt;http://www.jython.org&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Ruby - &lt;a href="http://jruby.org/"&gt;http://jruby.org/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
and many moreâ¦
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;From ZAP's &lt;a href="https://github.com/zaproxy/zap-core-help/wiki/HelpAddonsScriptsScripts"&gt;wiki&lt;/a&gt;&lt;/i&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Referring on scripts console add-on we are referring to the ability that the
user has to write scripts which implement various behaviors like scans, fuzzing etc.
Scripts Console add-on has a panel where the scripts are displayed. The panel
has a tree structure, which has two branches, the &lt;code&gt;Scripts&lt;/code&gt; branch and
&lt;code&gt;Templates&lt;/code&gt;. In both branches there are some folders which are referring on
different kinds of scripts. As you can see those folders in both branches have
the same names.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://manosmagnus.github.io/GSoC_19/images/pscan-tutorial/scripts_tree.png" alt="scripts_tree.png" align="center" width="300 height 800"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 4:&lt;/span&gt; Scripts Tree Sidebar&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
ZAP defines &lt;code&gt;Templates&lt;/code&gt; in order to be used as base scripts. As we will see
in a while every kind of scripts should perform a specific operation. For
instance, a WebSocket Passive Scanning script defines a set of rules that
WebSocket messages should adhere to. In addition, &lt;code&gt;Templates&lt;/code&gt; are not
runnable, enablable or directly editable, they are used only as templates. In
order to use a template, right click on it and then hit &lt;code&gt;New script...&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt;
Go to the template script &lt;code&gt;Base64 Disclosure.js&lt;/code&gt;, right click on it, and hit
&lt;code&gt;New Script...&lt;/code&gt; rename  &lt;code&gt;Script Name&lt;/code&gt; to &lt;code&gt;MyBase64 Disclosure.js&lt;/code&gt; and hit
save. See what happened. 
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;Scripts&lt;/code&gt;, on the other hand, are the actual scripts which are run by ZAP.
There are a good many possibilities in which we can use scripts,
however, in this guide we are interested in WebSocket Passive Scanning.
Passive Scripts have two states, enabled and disabled. When a script is
disabled that means that it is not running at all. Other options like
&lt;code&gt;duplicate&lt;/code&gt; script or &lt;code&gt;remove&lt;/code&gt; script are available by right clicking on
them. &lt;b&gt;&lt;b&gt;You should always remember that Right Click in ZAP is your best
friend.&lt;/b&gt;&lt;/b&gt; If a script failed (e.x. syntax error), exceptions messages will be
displayed in Scripts Console and the script will be automatically disabled.
By default, the folders under &lt;code&gt;Scripts&lt;/code&gt; are empty, except from the &lt;code&gt;WebSocket
   Passive Rules&lt;/code&gt;. If you want to explore more the scripting techniques and add
some rules in ZAP, I totally recommend to install &lt;code&gt;Community Scripts&lt;/code&gt; from
&lt;code&gt;marketplace&lt;/code&gt;.  
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt;
Go to the script that was created before. If it is not disabled, then disable it
using right click. Navigate over the code and find the following line: 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;PRINT_RESULTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
make it &lt;code&gt;true&lt;/code&gt;, enable and save the script. 
&lt;/p&gt;

&lt;p&gt;
Passive scan scripts are running against all messages, as a result we do not have to
run them explicitly. So the only thing we have to do is to enable them, and when
some messages will be transmitted via the WebSocket connections the scripts will
be triggered.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt; Connect to &lt;a href="http://websocket.org/echo.html"&gt;http://websocket.org/echo.html&lt;/a&gt; websocket
server as before, encode "Hello World" with a Base64 encoder
(SGVsbG8gV29ybGQ=) and send it. See what was printed in the scripts console.
&lt;/p&gt;

&lt;p&gt;
Then Disable your script, and find the following lines: 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newAlert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRiskConfidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RISK_INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CONFIDENCE_MEDIUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Base64 Disclosure in WebSocket message (script)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A Base64-encoded string has been found in the websocket incoming message. Base64-encoded data may contain sensitive "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s2"&gt;"information such as usernames, passwords or cookies which should be further inspected. Decoded evidence: "&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;decodedEvidence&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Base64-encoding should not be used to store or send sensitive information."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEvidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
and change the name of the alert. Re-enable the script. Send the Encoded
"Hello World" once again and then go to the &lt;code&gt;Alert Panel&lt;/code&gt; and see what happened.
Finally, remove the script using right click.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://manosmagnus.github.io/GSoC_19/images/pscan-tutorial/mybase64_alert.png" alt="mybase64_alert.png" align="center" width="900 height 400"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 5:&lt;/span&gt; Alert which is raised by MyBase64 script&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;WebSocket Passive Scan Scripts&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;a id="ws-pscan-scripts" name="ws-pscan-scripts"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
By default ZAP comes with various WebSocket Passive Scan Scripts. Default
Scripts are scanning passively the WebSocket Messages in order to disclosure
information which might be useful for the user while testing a Web
Application. As we saw before, scripts are classified into two categories,
&lt;code&gt;Templates&lt;/code&gt; and &lt;code&gt;Scripts&lt;/code&gt;. Default scripts are located in both categories.
Those which are in &lt;code&gt;Scripts&lt;/code&gt; category are ones which actually run against
the WebSocket Messages. You can modify them any 
time you want or even remove them. By default those passive scan scripts are
enabled and they are located under &lt;code&gt;&amp;lt;ZAP Home&amp;gt;/scripts/scripts/websocketpassive&lt;/code&gt;
directory. If you are not satisfied with your changes, you can always revert
to initial default scripts from the templates. 
&lt;/p&gt;

&lt;p&gt;
Template scripts can be found useful in two cases. In first case, you can use
them as base scripts, meaning that you can develop your rule by stacking your
features over the existing ones. In the other case, you can use them as back up
scripts, for instance if you are not satisfied with your changes, you can
revert them using the template script. They are located under &lt;code&gt;&amp;lt;ZAP
  Home&amp;gt;/scripts/templates/websocketpassive&lt;/code&gt; 
directory in OS. Template scripts classified to those which are implement a
passive scan rule and those which are just templates, meaning that they are not
implement any passive scan rule. If you are interested in writing a passive scan
rule which is not related with the existing ones, use those empty templates. To
identify them they are using keyword &lt;code&gt;Template&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Full list of default WebSocket Passive scan scripts and explanation about them
can be found in ZAP help (&lt;code&gt;F1 -&amp;gt; Add Ons -&amp;gt; WebSockets -&amp;gt; Passive Scan
  Rules&lt;/code&gt;). 
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;Default Scripts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;Base64 Disclosure:&lt;/b&gt;&lt;/b&gt; 
This script analyzes incoming WebSocket message payload for Base64 strings.
The encoded information may include sensitive data which may not
specifically meant for end user consumption. The regular expression which
is used to identify the Base64 string is based on padding characters. As
result False Negative may occur if the encoded string has length N bits
where (N)mod6 = 0. On the other hand, False Positives may occur if the
input text contains strings ending with '='. 
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;&lt;b&gt;Information Disclosure: Application Errors:&lt;/b&gt;&lt;/b&gt;
This script analyzes incoming WebSocket message payload for Base64 strings.
The encoded information may include sensitive data which may not
specifically meant for end user consumption. The regular expression which
is used to identify the Base64 string is based on padding characters. As
result False Negative may occur if the encoded string has length N bits
where (N)mod6 = 0. On the other hand, False Positives may occur if the
input text contains strings ending with '='. 
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;&lt;b&gt;Information Disclosure: Credit Card Number:&lt;/b&gt;&lt;/b&gt;
This script scans for the presence of Personally Information Identifiable
in incoming WebSocket message paylaod. More specifically, it passively
scans payload for credit card numbers. The available scans are for the
following credit card types: {American Express, Diners Club, Discover, Jcb,
Mestro, Master Card, Visa}. 
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;&lt;b&gt;Information Disclosure: Debug Errors:&lt;/b&gt;&lt;/b&gt; 
This script checks the incoming WebSocket message payload for known Debug
Error message fragments. Access to such details may provide a malicious
individual with means by which to further abuse the web site. They may also
leak data not specifically meant for end user consumption. 
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;&lt;b&gt;Information Disclosure: Email address:&lt;/b&gt;&lt;/b&gt;
This script scans incoming WebSocket messages for email addresses. Email
addresses may be not specifically meant for end user consumption. 
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;&lt;b&gt;Information Disclosure: Suspicious XML Comments:&lt;/b&gt;&lt;/b&gt;
This script checks incoming WebSocket messages payloads, which are XML
formatted, for suspicious comments. The comments it is searching for are
relevant to components with which an attacker can extract useful
information. Comments like FIXME, BUG, etc might be helpful for further
attacks targeting the weaknesses of the web application.
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;&lt;b&gt;Private Address Disclosure:&lt;/b&gt;&lt;/b&gt;
Checks incoming WebSocket message payload for inclusion of RFC 1918 IPv4
addresses as well as Amazon EC2 private hostnames (for example, ip-10-0-56-78).
This information can give an attacker useful information about the IP address
scheme of the internal network, and might be helpful for further attacks
targeting internal systems. This passive scanner may generate false positives in
the case of larger dotted numeric strings, such as vp09.02.51.10.01.09.16, where
the latter 4 octets appear to be a RFC 1918 IPv4 address. After review an
analyst can mark such alerts as False Positives in ZAP.  
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;&lt;b&gt;Username Disclosure:&lt;/b&gt;&lt;/b&gt;   
Checks incoming WebSocket message payload for usernames. This script can find
usernames which are hashed with the following methods: {MD2, MD5, SHA256,
SHA384, SHA512}. The usernames have to be defined in any context before. In
order to a add user in a Context follow the steps below: 

&lt;ol class="org-ol"&gt;
&lt;li&gt;Include the handshake request in `Context`
&lt;/li&gt;
&lt;li&gt;Set the target user in `Session Context`
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Change the Default Scripts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
What's great about scripts is the fact that's extremely easy to
configure them according to your own needs. All WebSocket Passive scans are
implemented with scripts. Additionally, you can easily reproduce an issue
only by sharing and loading the same script.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2-1" class="outline-4"&gt;
&lt;h4 id="sec-2-2-1"&gt;Use case 1: Application Error Scanner&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-1"&gt;
&lt;p&gt;
&lt;i&gt;(Based on &lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Application%2520Error%2520Scanner.js"&gt;Application Error Scanner script)&lt;/a&gt;&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Use case:&lt;/b&gt;&lt;/b&gt; You need to examine a Web Application about errors which might
  be transmitted over the WebSocket Connection. Let's say that the Default
  Script supports only MySQL Errors (this is not true) and you want to add
  rules for Microsoft DB as well. 
&lt;/p&gt;

&lt;p&gt;
Let's assume that the default script is the following one:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;OPCODE_TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;RISK_MEDIUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;CONFIDENCE_MEDIUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dbErrors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/supplied argument is not a valid MySQL result/igm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			  &lt;span class="sr"&gt;/Invalid parameter type/igm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			  &lt;span class="sr"&gt;/You have an error in your SQL syntax/igm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			  &lt;span class="sr"&gt;/server object error/igm&lt;/span&gt;
			  &lt;span class="p"&gt;......................&lt;/span&gt;
			  &lt;span class="p"&gt;.....................&lt;/span&gt;
			  &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opcode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;OPCODE_TEXT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOutgoing&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getReadablePayload&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;dbErrors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	    &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
		&lt;span class="nx"&gt;raiseAlert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
	    &lt;span class="p"&gt;});&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;raiseAlert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newAlert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRiskConfidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RISK_MEDIUM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CONFIDENCE_MEDIUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Application Error Disclosure via WebSockets (script)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"This payload contains an error/warning message that\&lt;/span&gt;
&lt;span class="s2"&gt; may disclose sensitive information like the location of the file\&lt;/span&gt;
&lt;span class="s2"&gt; that produced the unhandled exception. This information can be used\&lt;/span&gt;
&lt;span class="s2"&gt; to launch further attacks against the web application."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Review the error payloads which are piped directly to WebSockets.\&lt;/span&gt;
&lt;span class="s2"&gt; Handle the related exceptions.\&lt;/span&gt;
&lt;span class="s2"&gt; Consider implementing a mechanism to provide a unique\&lt;/span&gt;
&lt;span class="s2"&gt; error reference/identifier to the client (browser) while logging the\&lt;/span&gt;
&lt;span class="s2"&gt; details on the server side and not exposing them to the user."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEvidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCweId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;209&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Information Exposure Through an Error Message&lt;/span&gt;
	&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setWascId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Information Leakage&lt;/span&gt;
	&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Application Error Disclosure script"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;110001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
How easily can you extend this script? Just by adding a few lines:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;microsoftDbErrors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/Microsoft OLE DB Provider for ODBC Drivers/igm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
				     &lt;span class="sr"&gt;/Microsoft OLE DB Provider for SQL Server/igm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
				     &lt;span class="sr"&gt;/ODBC Microsoft Access Driver/igm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
				     &lt;span class="sr"&gt;/ODBC SQL Server Driver/igm&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mySqlDbErrors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/supplied argument is not a valid MySQL result/igm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		    &lt;span class="sr"&gt;/Invalid parameter type/igm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		    &lt;span class="sr"&gt;/You have an error in your SQL syntax/igm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		    &lt;span class="sr"&gt;/server object error/igm&lt;/span&gt;
		    &lt;span class="p"&gt;......................&lt;/span&gt;
		    &lt;span class="p"&gt;.....................&lt;/span&gt;
		    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dbErrors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;microsoftDbErrors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mySqlDbErrors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is just a demonstration how easily you can modify some of the
scripts. The actual script contains more Error messages for more cases. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;Write your own scripts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
What's awesome in ZAP is the ability easily write your own rules. In this section
we are going to write 4 different rules, from a dummy one to more "sophisticated"
ones. In this guide I am using JavaScript but the same procedure would be
possible using Jython with only slightly difference in syntax.      
&lt;/p&gt;

&lt;p&gt;
Actually, scripts implement an interface which is used internally by ZAP.
WebSocket Passive Scanning uses the &lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/websocket/src/main/java/org/zaproxy/zap/extension/websocket/pscan/scripts/WebSocketPassiveScript.java"&gt;WebSocketPassiveScript&lt;/a&gt; interface.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;WebSocketPassiveScript&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebSocketScanHelper&lt;/span&gt; &lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebSocketMessageDTO&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ScriptException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ScriptsWebSocketPassiveScanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PLUGIN_ID&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ScriptsWebSocketPassiveScanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PLUGIN_NAME&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In your script you have to implement &lt;code&gt;scan(helper,msg)&lt;/code&gt; and optionally
&lt;code&gt;getId()&lt;/code&gt; and &lt;code&gt;getName()&lt;/code&gt;. Those methods are called every time a WebSocket
Message is transmitted over the WebSocket protocol, either is &lt;code&gt;outgoing&lt;/code&gt;
(client -&amp;gt; server) or &lt;code&gt;incoming&lt;/code&gt; (server -&amp;gt; client). 
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;scan(helper,msg)&lt;/code&gt;:
Here is where you should implement your scanning rule by examining the
&lt;code&gt;msg&lt;/code&gt; and raising alerts using &lt;code&gt;helper&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;msg&lt;/code&gt;:
Is&lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/websocket/src/main/java/org/zaproxy/zap/extension/websocket/WebSocketMessageDTO.java"&gt; WebSocketMessageDTO&lt;/a&gt; instance which represent a WebSocket Message. You
should examine those instances using their functions which is presented in
a Template (presented in a while as well). 
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;helper&lt;/code&gt; the &lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/websocket/src/main/java/org/zaproxy/zap/extension/websocket/pscan/WebSocketScanHelper.java"&gt;WebSockeScanHelper&lt;/a&gt; interface provides the &lt;code&gt;newAlert()&lt;/code&gt;
       method in order to raise the appropriate alerts.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;helper.newAlert()&lt;/code&gt; -&amp;gt; Returns an &lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/websocket/src/main/java/org/zaproxy/zap/extension/websocket/alerts/WebSocketAlertRaiser.java"&gt;WebSocketAlertRaiser&lt;/a&gt; instance which
is used for building and raising alerts. You can find some useful
functions and explanation about them in the Template script. 
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;i&gt;(Optional)&lt;/i&gt; &lt;code&gt;getId()&lt;/code&gt;:
The ID of the passive rule, it is used on Alerts. Scanning rules are
documented in &lt;a href="https://github.com/zaproxy/zaproxy/blob/develop/docs/scanners.md"&gt;scanners.md&lt;/a&gt; with their ID. 
&lt;/li&gt;
&lt;li&gt;&lt;i&gt;(Optional)&lt;/i&gt; &lt;code&gt;getName()&lt;/code&gt;
     The name of the passive rule.    
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3-1" class="outline-4"&gt;
&lt;h4 id="sec-2-3-1"&gt;Case 0: Greater Than 10&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3-1"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Use case:&lt;/b&gt;&lt;/b&gt; Let's assume that you are interested in writing a rule in
order to be informed when an outgoing WebSocket message payload, with text
opcode, has length greater that 10.
&lt;/p&gt;

&lt;p&gt;
First of all, we have to create a new script using the Template. In this
guide we are going to use only JavaScript rules, however, the procedure is
the same for other available scripting languages as well. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt; Create a new template from &lt;code&gt;Passive WebSocket Scan
    Template.js&lt;/code&gt;, name it &lt;code&gt;GreaterThan10.js&lt;/code&gt; and hit save. 
&lt;/p&gt;

&lt;p&gt;
Let's take a look at the template script. The first few lines are constants which
might be useful in your scripts.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;OPCODE_CONTINUATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;OPCODE_TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;OPCODE_BINARY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;OPCODE_CLOSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;OPCODE_PING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;OPCODE_PONG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;RISK_INFO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;RISK_LOW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;RISK_MEDIUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;RISK_HIGH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;CONFIDENCE_LOW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;CONFIDENCE_MEDIUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;CONFIDENCE_HIGH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt; Keep only the constants which are useful for our case (e.g.
  &lt;code&gt;OPCODE_TEXT&lt;/code&gt;, &lt;code&gt;RISK_INFO&lt;/code&gt;, &lt;code&gt;CONFIDENCE_HIGH&lt;/code&gt;). 
&lt;/p&gt;

&lt;p&gt;
Template script also contains help content with functions and variables
which might be useful to you.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * This function scans passively WebSocket messages. The scan function will be called for&lt;/span&gt;
&lt;span class="cm"&gt; * messages via ZAP.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @param helper - the WebSocketPassiveHelper interface provides the newAlert() method in order&lt;/span&gt;
&lt;span class="cm"&gt; *                 to raise the appropriate alerts&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Some useful function(s) about  WebSocketPassiveHelper:&lt;/span&gt;
&lt;span class="cm"&gt; * helper.newAlert() -&amp;gt; Returns an WebSocketAlertRaiser instance which is used&lt;/span&gt;
&lt;span class="cm"&gt; *                      for building and raising alerts.&lt;/span&gt;

&lt;span class="cm"&gt; * * Some useful functions about WebSocketAlertRaiser:&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.setRiskConfidence(risk, confidence) -&amp;gt; Sets the Risk and the Confidence of the alert. (by default RISK_INFO, CONFIDENCE_MEDIUM).&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.setName(name)                       -&amp;gt; Sets the name (by default "").&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.setDescription(description)         -&amp;gt; Sets a description about potential threat (by default "").&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.setParam(param)                     -&amp;gt; Sets in which parameter threat is noticed (by default "").&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.setSolution(solution)               -&amp;gt; Sets a possible solution (by default "").&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.setReference(reference)             -&amp;gt; Sets extra references (ex. a web link) (by default "").&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.setEvidence(evidence)               -&amp;gt; Sets what's the evidence of potential thread (by default "").&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.setCweId(cweId)                    -&amp;gt; Sets the CWE ID of the issue (by default 0)&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.setWascId(wascId)                   -&amp;gt; Sets the WASC ID of the issue (by default 0)&lt;/span&gt;
&lt;span class="cm"&gt; * * alertRaiser.raise()                             -&amp;gt; Build and Raise the alert (returns the WebSocketAlertWrapper)&lt;/span&gt;

&lt;span class="cm"&gt; * @param msg - the Websocket Message being scanned. This is a WebSocketMessageDTO object.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Some useful functions and fields of WebSocketMessageDTO:&lt;/span&gt;
&lt;span class="cm"&gt; * msg.channel        -&amp;gt; Channel of the message (WebSocketChannelDTO)&lt;/span&gt;
&lt;span class="cm"&gt; * msg.id             -&amp;gt; Unique ID of the message (int)&lt;/span&gt;
&lt;span class="cm"&gt; * msg.opcode         -&amp;gt; Opcode of the message (int) (Opcodes defined bellow)&lt;/span&gt;
&lt;span class="cm"&gt; * msg.readableOpcode -&amp;gt; Textual representation of opcode (String)&lt;/span&gt;
&lt;span class="cm"&gt; * msg.isOutgoing     -&amp;gt; Outgoing or incoming message (boolean)&lt;/span&gt;
&lt;span class="cm"&gt; * msg.getReadablePayload() -&amp;gt; Return readable representation of payload&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * * Some useful functions and fields of WebSocketChannelDTO:&lt;/span&gt;
&lt;span class="cm"&gt; * * channel.id         -&amp;gt; Unique ID of the message (int)&lt;/span&gt;
&lt;span class="cm"&gt; * * channel.host       -&amp;gt; Host of the WebSocket Server (String)&lt;/span&gt;
&lt;span class="cm"&gt; * * channel.port       -&amp;gt; Port where the channel is connected at. Usually at 80 or 443.&lt;/span&gt;
&lt;span class="cm"&gt; * * channel.url        -&amp;gt; URL used in HTTP handshake (String).&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ............&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's quite common in passive scan rules to check first if the message has
the properties we want. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt; Remove the default code in &lt;code&gt;scan(helper, msg)&lt;/code&gt;, then 
  check if the message has those properties (be outgoing and has text
  opcode) and keep them for examination else return without doing anything. 
&lt;/p&gt;

&lt;p&gt;
When it is required to examine the payload we have to extract the payload of
the WebSocket message. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt; Get the payload and check if it has more than 10 characters.
&lt;/p&gt;

&lt;p&gt;
If the payload  has  &lt;code&gt;payload.length &amp;gt; 10&lt;/code&gt; then we have to
raise an alert in order to inform ourselves that a message payload violate
our rule. Raise an alert by using &lt;code&gt;helper.newAlert()&lt;/code&gt; and build the alert
accordingly. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt; Raise an alert with a Name, Risk &amp;amp; Confidence, evidence
  and description. &lt;b&gt;&lt;b&gt;Save and Enable the script&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;OPCODE_TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;RISK_INFO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;CONFIDENCE_HIGH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opcode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;OPCODE_TEXT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOutgoing&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getReadablePayload&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newAlert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRiskConfidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RISK_INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CONFIDENCE_HIGH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Greater Than 10 (Script)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The payload has more than 10 characters"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEvidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3-2" class="outline-4"&gt;
&lt;h4 id="sec-2-3-2"&gt;Case 1: Email Disclosure&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3-2"&gt;
&lt;p&gt;
&lt;i&gt;(Based on &lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Email%2520Disclosure.js"&gt;Email Disclosure Script&lt;/a&gt;)&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
We are using this case because it's common to have Regular Expression
patterns in rules. In this rule we want a pattern in order to identify email
addresses in WebSocket messages payloads. This script is
straightforward as it uses just a regular expression to match the pattern
with the incoming message payload.
&lt;/p&gt;

&lt;p&gt;
When we are using patterns the best way is to set the &lt;code&gt;evidence&lt;/code&gt;, of the alert,
to the matching characters in order to be informed about the potential
issue. In this script we set also Name and ID to the rule.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;// This script scans incoming WebSocket messages for email address.&lt;/span&gt;

    &lt;span class="c1"&gt;// * Author: Manos Kirtas (Manos Kirtas)&lt;/span&gt;
    &lt;span class="c1"&gt;// * Based on: community-scripts/passive/Find Emails.js&lt;/span&gt;

    &lt;span class="nx"&gt;OPCODE_TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;RISK_INFO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;CONFIDENCE_HIGH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;emailRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"([a-z0-9_.+-]+@[a-z0-9]+[a-z0-9-]*\.[a-z0-9-.]*[a-z0-9]{2,})"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'gmi'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opcode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;OPCODE_TEXT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOutgoing&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getReadablePayload&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailRegex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	    &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newAlert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRiskConfidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RISK_INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CONFIDENCE_HIGH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Email address found in WebSocket message (script)."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"An email address was found in a WebSocket Message."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Remove emails that are not public."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEvidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCweId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Information Exposure&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setWascId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Information Leakage&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
	&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Email Disclosure script"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;110004&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3-3" class="outline-4"&gt;
&lt;h4 id="sec-2-3-3"&gt;Case 2: Base64 Disclosure&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3-3"&gt;
&lt;p&gt;
&lt;i&gt;(Based on &lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Base64%2520Disclosure.js"&gt;Base64 Disclosure Script&lt;/a&gt;)&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
Base64 disclosure script is based also in pattern matching. However, it's
interesting because it uses Java build-in libraries. You can easily
define Java instances and types as follows:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;base64Decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDecoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;JavaString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"java.lang.String"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Those two variables are going to help us to decode Base64 matches and make the
content human readable. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// * This script analyzes incoming websocket messages for base64 strings.&lt;/span&gt;

&lt;span class="c1"&gt;// * Regex Test: https://regex101.com/r/OOElRY/3&lt;/span&gt;
&lt;span class="c1"&gt;// ** Forked by: https://regex101.com/library/dS0sM8&lt;/span&gt;

&lt;span class="c1"&gt;// Author: Manos Kirtas (manolis.kirt@gmail.com)&lt;/span&gt;

&lt;span class="c1"&gt;// Passive scan rules should not send messages&lt;/span&gt;
&lt;span class="c1"&gt;// Right click the script in the Scripts tree and select "enable"  or "disable"&lt;/span&gt;

&lt;span class="nx"&gt;OPCODE_TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;RISK_INFO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;CONFIDENCE_MEDIUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;base64Regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/((?:[A-Za-z0-9+\/]{4}\n?)*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=))/gmi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;base64Decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDecoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;JavaString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"java.lang.String"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opcode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;OPCODE_TEXT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOutgoing&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getReadablePayload&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64Regex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
	&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

	    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;decodedEvidence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JavaString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64Decoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

	    &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newAlert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRiskConfidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RISK_INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CONFIDENCE_MEDIUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Base64 Disclosure in WebSocket message (script)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A Base64-encoded string has been found in the websocket incoming message. Base64-encoded data may contain sensitive "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
				&lt;span class="s2"&gt;"information such as usernames, passwords or cookies which should be further inspected. Decoded evidence: "&lt;/span&gt;
				&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;decodedEvidence&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Base64-encoding should not be used to store or send sensitive information."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEvidence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evidence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
	&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Base64 Disclosure script"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;110002&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3-4" class="outline-4"&gt;
&lt;h4 id="sec-2-3-4"&gt;Case 3: Username Disclosure&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3-4"&gt;
&lt;p&gt;
&lt;i&gt;(Based on &lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Username%2520Idor%2520Scanner.js"&gt;Username Disclosure Script&lt;/a&gt;)&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
Finally, we are going to examine the Username Disclosure script. I consider
this script as "sophisticated" one as it is accessing internal ZAP
data structure. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Use case:&lt;/b&gt;&lt;/b&gt; Let's assume that you are suspecting that the web application
you are checking sends usernames and passwords via
WebSocket. You also suspect that the username hashed with a common
hashing algorithm before was sent via WebSocket connection. In order to check this
you have to create a script which is checking patterns of common hashes of
usernames which are used. You provide the usernames to the Web Application
by using a login form. 
&lt;/p&gt;

&lt;p&gt;
You can tell ZAP that you are using credential for a specific
Web Application by adding them in &lt;code&gt;Context&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hands on Section:&lt;/b&gt;&lt;/b&gt; Visit &lt;a href="http://websocket.org/echo.html"&gt;http://websocket.org/echo.html&lt;/a&gt; as before. Create a new
context, use as root node the &lt;a href="http://echo.websocket.org"&gt;http://echo.websocket.org&lt;/a&gt;, then set up the
authentication mechanism in your context (by right clicking on them ;)
&lt;code&gt;Session Properties -&amp;gt; Authentication -&amp;gt; Form-Based Authentication&lt;/code&gt;, and add
a &lt;code&gt;User&lt;/code&gt; in &lt;code&gt;Session Properties -&amp;gt; User -&amp;gt; Add&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
In order to check formally if a username is transmitted over the WebSocket
protocol we have to access &lt;code&gt;Contexts&lt;/code&gt; and the stored
&lt;code&gt;Users&lt;/code&gt;. In order to access them we should access the following internal ZAP
classes:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"org.parosproxy.paros.model.Model"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"org.parosproxy.paros.control.Control"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ExtensionUserManagement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"org.zaproxy.zap.extension.users.ExtensionUserManagement"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;Model&lt;/code&gt; can provide us the access to ZAP contexts, while &lt;code&gt;Control&lt;/code&gt; is used
to obtain the &lt;code&gt;ExtensionUserManagement&lt;/code&gt; class. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="nx"&gt;extUserManagment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getExtensionUserManagment&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	&lt;span class="nx"&gt;usersList&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
	&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;contexts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSingleton&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getSession&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getContexts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
	&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

	&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;contexts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	    &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contexts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
	    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;contextUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extUserManagment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContextUserAuthManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIndex&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
		&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;contextUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
		    &lt;span class="nx"&gt;usersList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
		&lt;span class="p"&gt;}&lt;/span&gt;
	    &lt;span class="p"&gt;}&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;usersList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getExtensionUserManagment&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extUserManagment&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
	&lt;span class="nx"&gt;extUserManagment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getExtensionLoader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
	    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ExtensionUserManagement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;extUserManagment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In addition to that we are using the &lt;code&gt;Appache Commons Codec&lt;/code&gt;
library, which came bundled with ZAP, to hash the usernames.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;DigestUtils&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"org.apache.commons.codec.digest.DigestUtils"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getHashes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;usernameHashes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="nx"&gt;usernameHashes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'MD2'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DigestUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md2Hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'gmi'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;usernameHashes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'MD5'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DigestUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md5Hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'gmi'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;usernameHashes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'SHA1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DigestUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sha1Hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'gmi'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;usernameHashes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'SHA256'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DigestUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sha256Hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'gmi'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;usernameHashes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'SHA384'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DigestUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sha384Hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'gmi'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;usernameHashes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'SHA512'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DigestUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sha512Hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'gmi'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;usernameHashes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It's quite obvious that in the next step we should just check the above
patterns. This might seem difficult if not familiar with the code base,
however it's not (I am not familiar with code base too). A great thing about ZAP
is the fact it have plenty of passive and active rules available. 
&lt;/p&gt;

&lt;p&gt;
Firstly, I would like to refer to community scripts. Community scripts are
developed by community and they are responsible for various "extra" rules
that ZAP has. If you don't use them already, I totally recommend to give them a try by
installing them via &lt;code&gt;Marketplace&lt;/code&gt;. In the Community Scripts you can find all
you need to develop a "sophisticated" WebSocket Passive Scanner script. In
fact, some of the above scripts are based on existing HTTP scanning script (e.g. &lt;a href="https://github.com/zaproxy/community-scripts/blob/master/passive/Find%2520Emails.js"&gt;Email
Disclosure&lt;/a&gt;).  
&lt;/p&gt;

&lt;p&gt;
If you don't find what you are searching for in the Community Scripts, then maybe you
have to take look at the Java rules. Most of the above scripts are based on them. For
example, the script in that last use case is inspired by and uses code blocks from the
existing HTTP passive scan rule for Users Disclosure (&lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/UsernameIdorScanner.java"&gt;UsernameIdorScanner.java&lt;/a&gt;). 
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;(The actual script is &lt;a href="https://github.com/zaproxy/zap-extensions/blob/master/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Username%2520Idor%2520Scanner.js"&gt;Username Idor Scanner&lt;/a&gt;)&lt;/i&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Tips and Tricks&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;If you prefer your editor to write and modify the script this is not a problem.
You can modify externally the scripts and when you save them, ZAP will
prompt you to choose if you prefer to keep your external changes.
&lt;/li&gt;

&lt;li&gt;If you need some help, use what works better for you from &lt;a href="https://github.com/zaproxy/zaproxy#for-help-using-zap"&gt;here&lt;/a&gt;.  
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Contribute to ZAP&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
There are many ways to contribute in ZAP. If you are interested in WebSocket
Passive Scanning scripts, you can contribute your scripts in &lt;a href="https://github.com/zaproxy/community-scripts/tree/master/websocketpassive"&gt;Community Scripts Repo&lt;/a&gt;,
PRs are more than welcome. In addition, if there is an intention to improve
an existing default script or even add a new one, you can open an issue for
enhancement in &lt;a href="https://github.com/zaproxy/zaproxy"&gt;zaproxy repo&lt;/a&gt; and discuss them with the ZAP community.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Acknowledgments&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
This projects is part of my GSoC'18 &amp;amp; GSoC'19 participation. So I would like
to thank Google Summer of Code for the opportunity. &lt;b&gt;&lt;b&gt;Last but not least, I would like to thank my mentors &lt;a href="https://twitter.com/psiinon"&gt;@psiinon&lt;/a&gt;, &lt;a href="https://twitter.com/kingthorin_rm"&gt;@kingthorin&lt;/a&gt; and &lt;a href="https://github.com/thc202"&gt;thc202&lt;/a&gt; for the support and the extensively code review.&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>passive</category><category>scan</category><category>tutorial</category><category>websockets</category><category>ZAP</category><guid>https://manosmagnus.github.io/GSoC_19/posts/websocket-passive-scan-using-scripts-with-zap/</guid><pubDate>Thu, 11 Jul 2019 11:43:55 GMT</pubDate></item></channel></rss>